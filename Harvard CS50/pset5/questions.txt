0.  a pneumoconiosis caused by inhalation of very fine silicate or quartz dust
1.  getrusage returns resource usage for a process
2.  16
3.  instead of passing the copy of the variable before, you are passing the address at before which is the struct rusage. this allows accessing all of the variables in the struct.
4.  the main file reads words by passing them to the word string letter by letter.  for example the word "The"  would first read 'T' and store in word[0], increment index to 1 then move to the next
letter storing 'h' in word[1], and 'e' in word[2].  when in reaches the end of the line it sets word[3] = '\0', and resets the index back to 0 to prepare to put together another word.
6.  They are constants because the parameters length and and dictionary have been defined as constants
7.  I used a hash table to implement my code the hash table is a struct containing the variable node* table[CAPACITY].  node is itself a strcut containing variables char word, and node* next(pointer to next node).
8.  Well the first time the code started working properly it wasn't fast because I had not optimized the CAPACITY variable (currently 75000) I had it originally at 1000 thinking that would be more than large enough to 
accommodate the hash table inputs.  but the staff solution was much faster than mine at the beginning because check took quite a while to run.
9.  As mentioned above - CAPACITY increases.
10. I think this code doesn't have too much in the way of bottlenecks, it runs right at as fast as the staff solution (well it did when I ran it here!!).
